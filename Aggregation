Q1: In aggregation what we can do in  $group what cannot in mongodb?

Ans:  the $group stage in an aggregation pipeline is used to group documents by a specified expression and perform operations on the grouped data. The $group stage can perform various aggregations, such as counting, summing, averaging,max , min and more  in eacg group. However, there are certain things that you can do with $group in an aggregation pipeline that you cannot do in a regular MongoDB query.

#Capabilities of $group in Aggregation

#Accumulators:   These  accumulators are applied on group only so if not needed to group by field then we group by {_id:null} and apply $min , $max and other Accumulator shown below.

$sum: Calculates the sum of numerical values.
$avg: Calculates the average of numerical values.
$min and $max: Finds the minimum and maximum values, respectively.
$first and $last: Retrieves the first and last documents in each group.
$push and $addToSet: Adds values to an array (allowing duplicates with $push and ensuring unique values with $addToSet).

#Grouping by Expressions:

You can group by any expression, including fields, computed values, or even constants.
For example, you can group by the result of a date extraction operation like { $year: "$dateField" }.
Complex Computations:

You can perform complex computations within the $group stage using various expressions and operators.
For instance, you can calculate the average over a derived value, not just a direct field.
Nested Objects and Arrays:

#different ways to use $group:

=>dataset: [
  { "_id": 1, "product": "A", "price": 10, "quantity": 2, "date": "2023-07-01" },
  { "_id": 2, "product": "B", "price": 20, "quantity": 1, "date": "2023-07-01" },
  { "_id": 3, "product": "A", "price": 10, "quantity": 5, "date": "2023-07-02" },
  { "_id": 4, "product": "C", "price": 30, "quantity": 3, "date": "2023-07-03" },
  { "_id": 5, "product": "B", "price": 20, "quantity": 4, "date": "2023-07-03" }
]

1.Group by filed
=>db.sales.aggregate([
  {
    $group: {
      _id: "$product",
      totalQuantity: { $sum: "$quantity" }
    }
  }
]);

2.Group by a Computed Value:
=>Group by the day of the week (computed from the date field) to get total sales for each day of the week: day will be 1 to 7  from sunday to saturday.

code :

//just study the way its using , donot evalutae this : its right but day coming is confusingg
db.sales.aggregate([
  {
    $group: {
      _id: { $dayOfWeek: { $dateFromString: { dateString: "$date" } } },
      totalSales: { $sum: { $multiply: ["$price", "$quantity"] } }
    }
  }
]);

3.Group by a Constant:
=>Group all documents together and compute the total sales across all documents:
=>CODE:
 db.sales.aggregate([
  {
    $group: {
      _id: null,
      totalSales: { $sum: { $multiply: ["$price", "$quantity"] } }
    }
  }
]);

//op: 
{
_id:null,
totalSales:260
}


4. Group by Multiple Fields:
=>Group by product and date to get the total quantity sold for each product on each date:
=>CODE: 
db.sales.aggregate([
  {
    $group: {
      _id: { product: "$product", date: "$date" },
      totalQuantity: { $sum: "$quantity" }
    }
  }
]);

5.Group by a Nested Field:
Suppose the documents have a nested details field:
=>CODE: 
db.sales.aggregate([
  {
    $group: {
      _id: "$details.product",
      totalQuantity: { $sum: "$quantity" }
    }
  }
]);

6. Group by an Expression:
=>Group by a custom expression, such as products with a price greater than 15 or not:
CODE: 
db.sales.aggregate([
  {
    $group: {
      _id: { $cond: { if: { $gt: ["$price", 15] }, then: "expensive", else: "cheap" } },
      totalQuantity: { $sum: "$quantity" }
    }
  }
]);


# VVVVI: SOME OTHER BUT VVI QUERY ABOUT GROUP , SORT AND OTHERS :
You can group by fields within nested objects and arrays using dot notation.
eg:
#data: {
  "_id": 1,
  "customer": {
    "id": "C001",
    "name": "Alice"
  },
  "items": [
    {
      "productId": "P001",
      "quantity": 2,
      "price": 20
    },
    {
      "productId": "P002",
      "quantity": 1,
      "price": 50
    }
  ],
  "date": ISODate("2023-01-01T10:00:00Z")
}


#query: 
 db.orders.aggregate([
  {
    $unwind: "$items"
  },
  {
    $group: {
      _id: "$customer.id",
      totalQuantity: { $sum: "$items.quantity" },
      totalAmount: { $sum: { $multiply: ["$items.quantity", "$items.price"] } }
    }
  }
]);


eg:3 : for $first , $last 

data: db.orders.insertMany([
  { "_id": 1, "customerId": "C001", "orderDate": ISODate("2023-01-01T10:00:00Z"), "amount": 100 },
  { "_id": 2, "customerId": "C001", "orderDate": ISODate("2023-02-01T10:00:00Z"), "amount": 200 },
  { "_id": 3, "customerId": "C002", "orderDate": ISODate("2023-01-15T10:00:00Z"), "amount": 150 },
  { "_id": 4, "customerId": "C002", "orderDate": ISODate("2023-03-01T10:00:00Z"), "amount": 250 }
]);


query: [
  {
    $sort: { "orderDate": 1 } // Sort by orderDate in ascending order
  },
  {
    $group: {
      _id: "$customerId",
      firstOrderDate: { $first: "$orderDate" }, //NOte: this is new filed name we are defining in group , in same way we can defined in other stages
      lastOrderDate: { $last: "$orderDate" },
      firstOrderAmount: { $first: "$amount" },
      lastOrderAmount: { $last: "$amount" }
    }
  }
]

op: 
[
  {
    "_id": "C002",
    "firstOrderDate": "2023-01-15T10:00:00Z",
    "lastOrderDate": "2023-03-01T10:00:00Z",
    "firstOrderAmount": 150,
    "lastOrderAmount": 250
  },
  {
    "_id": "C001",
    "firstOrderDate": "2023-01-01T10:00:00Z",
    "lastOrderDate": "2023-02-01T10:00:00Z",
    "firstOrderAmount": 100,
    "lastOrderAmount": 200
  }
]


Q:2   when to use "$fieldName" and when not ?
Ans: "$fieldName" : is used when want the value of referneced filedName then "fieldName" gives value of that filed:
eg:db.sales.aggregate([
  {
    $group: {
      _id: "$productId",
      totalAmount: { $sum: "$amount" }
    }
  }
]);

In this example:
"$productId" references the productId field value.
"$amount" references the amount field value.

2: Within Expressions and Operators:

Used inside various operators like $match, $project, $group, etc.
Indicates that the operation should use the value from the specified field.
Example: Using $match to filter documents:
db.sales.aggregate([
  {
    $match: { amount: { $gt: 100 } }
  }
]);
Here, amount is the field name, and $gt is an operator.



#Topic_3: $Lookup
=> it can be used only with aggreagation(). It can be used in any stage in aggregation pipeline.

Eg: query :
db.orders.aggregate([
  // Match Stage
  <!-- {
    $match: {
      date: { $gte: ISODate("2023-01-01T00:00:00Z") }   // for now ignore match stage , since in dataset date filed is missing , but just understand that can apply looUp at any stage
    }
  }, -->
  // First Lookup Stage
  {
    $lookup: {
      from: "customers",
      localField: "customerId",
      foreignField: "_id",
      as: "customerDetails"
    }
  },
  // Unwind Stage
  {
    $unwind: "$customerDetails"
  },
  // Group Stage
  {
    $group: {
      _id: "$customerId",
      totalSpent: { $sum: "$totalAmount" },
      customerDetails: { $first: "$customerDetails" }
    }
  },
  // Second Lookup Stage
  {
    $lookup: {
      from: "orders",
      localField: "_id",
      foreignField: "customerId",
      as: "orderHistory"
    }
  }
]);


 
explanation: Explanation
$match Stage:

Filters the orders collection to include only documents where the date is greater than or equal to January 1, 2023.
First $lookup Stage:

Joins the customers collection to add customer details to each order. The matching customer details are stored in the customerDetails array.
$unwind Stage:

Deconstructs the customerDetails array to output a document for each element. Since the array is expected to have one element, this effectively merges the customer details into the order document.
$group Stage:

Groups the documents by customerId.
Sums the totalAmount field to get the total amount spent by each customer.
Uses $first to include the customer details in the grouped output.
Second $lookup Stage:

Performs a left outer join with the orders collection to add the order history for each customer. The matching orders are stored in the orderHistory array.

Explanation with dataset:

1.customers :   dataset
=> [
  { "_id": 101, "name": "Alice", "email": "alice@example.com" },
  { "_id": 102, "name": "Bob", "email": "bob@example.com" },
  { "_id": 103, "name": "Charlie", "email": "charlie@example.com" }
]

2.orders : dataset
=>
[
  { "_id": 101, "name": "Alice", "email": "alice@example.com" },
  { "_id": 102, "name": "Bob", "email": "bob@example.com" },
  { "_id": 103, "name": "Charlie", "email": "charlie@example.com" }
]

Query explanation: 
1. $lookup Stage
This stage performs a left outer join to the customers collection. It adds a new array field customerDetails to each document, containing the matched documents from the customers collection.

input: [
  { "_id": 1, "customerId": 101, "totalAmount": 50 },
  { "_id": 2, "customerId": 102, "totalAmount": 150 },
  { "_id": 3, "customerId": 101, "totalAmount": 100 },
  { "_id": 4, "customerId": 103, "totalAmount": 200 }
]

Output:[
  { "_id": 1, "customerId": 101, "totalAmount": 50, "customerDetails": [{ "_id": 101, "name": "Alice", "email": "alice@example.com" }] },
  { "_id": 2, "customerId": 102, "totalAmount": 150, "customerDetails": [{ "_id": 102, "name": "Bob", "email": "bob@example.com" }] },
  { "_id": 3, "customerId": 101, "totalAmount": 100, "customerDetails": [{ "_id": 101, "name": "Alice", "email": "alice@example.com" }] },
  { "_id": 4, "customerId": 103, "totalAmount": 200, "customerDetails": [{ "_id": 103, "name": "Charlie", "email": "charlie@example.com" }] }
]

2. $unwind Stage
This stage deconstructs the customerDetails array field from the input documents to output a document for each element of the array. Since customerDetails arrays have only one element, this essentially flattens the array.

Output: [
  { "_id": 1, "customerId": 101, "totalAmount": 50, "customerDetails": { "_id": 101, "name": "Alice", "email": "alice@example.com" } },
  { "_id": 2, "customerId": 102, "totalAmount": 150, "customerDetails": { "_id": 102, "name": "Bob", "email": "bob@example.com" } },
  { "_id": 3, "customerId": 101, "totalAmount": 100, "customerDetails": { "_id": 101, "name": "Alice", "email": "alice@example.com" } },
  { "_id": 4, "customerId": 103, "totalAmount": 200, "customerDetails": { "_id": 103, "name": "Charlie", "email": "charlie@example.com" } }
]

3. "$group" Stage
This stage groups documents by customerId, calculates the total amount spent by each customer, and retains the first occurrence of customerDetails for each group.

Output:
[
  { "_id": 101, "totalSpent": 150, "customerDetails": { "_id": 101, "name": "Alice", "email": "alice@example.com" } },
  { "_id": 102, "totalSpent": 150, "customerDetails": { "_id": 102, "name": "Bob", "email": "bob@example.com" } },
  { "_id": 103, "totalSpent": 200, "customerDetails": { "_id": 103, "name": "Charlie", "email": "charlie@example.com" } }
]

4. Second "$lookup" Stage
This stage performs another left outer join, this time with the orders collection. It adds a new array field orderHistory to each document, containing the matched documents from the orders collection based on customerId.

Output:[
  {
    "_id": 101,
    "totalSpent": 150,
    "customerDetails": { "_id": 101, "name": "Alice", "email": "alice@example.com" },
    "orderHistory": [
      { "_id": 1, "customerId": 101, "orderDate": "2023-07-01" },
      { "_id": 3, "customerId": 101, "orderDate": "2023-07-03" }
    ]
  },
  {
    "_id": 102,
    "totalSpent": 150,
    "customerDetails": { "_id": 102, "name": "Bob", "email": "bob@example.com" },
    "orderHistory": [
      { "_id": 2, "customerId": 102, "orderDate": "2023-07-02" }
    ]
  },
  {
    "_id": 103,
    "totalSpent": 200,
    "customerDetails": { "_id": 103, "name": "Charlie", "email": "charlie@example.com" },
    "orderHistory": [
      { "_id": 4, "customerId": 103, "orderDate": "2023-07-04" }
    ]
  }
]






################################################################################################################################
4: Topic:4 : handling Arrays in Aggregation
=> When document has array and we have to do some opreation using data in array then we have to first split the array : It can be done using various ways .they are: 
 # $unwind 
 => Eg: 
 Input dataset: 

 [
  {
    "_id": "1",
    "name": "Alice",
    "grades": [
      { "subject": "Math", "score": 85 },
      { "subject": "English", "score": 92 },
      { "subject": "History", "score": 78 }
    ]
  },
  {
    "_id": "2",
    "name": "Bob",
    "grades": [
      { "subject": "Math", "score": 89 },
      { "subject": "English", "score": 76 },
      { "subject": "History", "score": 95 }
    ]
  },
  {
    "_id": "3",
    "name": "Charlie",
    "grades": [
      { "subject": "Math", "score": 92 },
      { "subject": "English", "score": 88 },
      { "subject": "History", "score": 84 }
    ]
  }
] 


=>Here is an aggregation pipeline that uses $unwind to deconstruct the grades array and calculate the average score for each subject.

code : db.students.aggregate([
  // Unwind Stage
  {
    $unwind: "$grades"
  },
  // Group Stage
  {
    $group: {
      _id: "$grades.subject",
      averageScore: { $avg: "$grades.score" }
    }
  }
]);

#Explanation

$unwind Stage:
=>Deconstructs the grades array, outputting a document for each grade in the array. This means each student document will be split into multiple documents, one for each grade.
//op: after unwind stage:

[
  { "_id": "1", "name": "Alice", "grades": { "subject": "Math", "score": 85 } },
  { "_id": "1", "name": "Alice", "grades": { "subject": "English", "score": 92 } },
  { "_id": "1", "name": "Alice", "grades": { "subject": "History", "score": 78 } },
  { "_id": "2", "name": "Bob", "grades": { "subject": "Math", "score": 89 } },
  { "_id": "2", "name": "Bob", "grades": { "subject": "English", "score": 76 } },
  { "_id": "2", "name": "Bob", "grades": { "subject": "History", "score": 95 } },
  { "_id": "3", "name": "Charlie", "grades": { "subject": "Math", "score": 92 } },
  { "_id": "3", "name": "Charlie", "grades": { "subject": "English", "score": 88 } },
  { "_id": "3", "name": "Charlie", "grades": { "subject": "History", "score": 84 } }
]


$group Stage:
=>Groups the documents by the subject field value in the grades array.  This makes  three gropus with _id:Math , _id:English , _id:History .  In each group there are 3 docs. so {$sum:1} gives count of items in group .Or do average of these docs in group . as done below.

Calculates the average score for each subject using { $avg: "$grades.score" }.

#Result
=>The result of the aggregation pipeline will be a document for each subject with the average score:
op:
[
  { "_id": "Math", "averageScore": 88.66666666666667 },
  { "_id": "English", "averageScore": 85.33333333333333 },
  { "_id": "History", "averageScore": 85.66666666666667 }
]



Q.  Query2: 
[
  {
    $unwind: "$grades"
  },
  {
    $group: {
      _id:"$name",
      avgGrades: {
        $avg:"$grades.score"
      }
    }
	},
  {
    $group: {
      _id: null,
      totalDocs:{$sum:1}
    }
  }
]


Ans:
Op: after 2nd stage: 
[
  {
    "_id": "Alice", // its is id of group which has 3 docs and now treated as simgle document.
    "avgGrades": 85
  },
  {
    "_id": "Bob",
    "avgGrades": 86.66666666666667
  },
  {
    "_id": "Charlie",
    "avgGrades": 88
  }
]



op: 3rd stage: it groups all documents (i.e three groups which got  from 2nd stage) into single . since  group by {_id: null}  always make single group with documents .   and gives docs in  this group which is 3 .

 after 3rd stage:  OP:

  {
    _id:null,
    totalDocs:3
  }



###  use of $expr in $lookup:
=> 
  ## Q. When to Use $expr vs. localField/foreignField?
=> Scenario	Use $expr	Use localField/foreignField
Simple field matching	:  use localField/foreignField ✅
Comparing fields with conditions ($eq, $gt, etc.):	Use $expr✅	
Filtering based on additional conditions	:	Use $expr✅
Multiple conditions ($and, $or)	:	Use $expr✅
If you just need a direct match, localField/foreignField is simpler and faster. Use $expr when you need complex conditions. 🚀


 ## pipeline in $lookup 
=> In MongoDB's $lookup stage, the pipeline operator (let and pipeline) allows more complex lookups by enabling filtering, transformations, 
and computations on the foreign collection. This is an enhancement over the basic $lookup, which only performs a simple left join.

  # Syntax of $lookup with Pipeline:
  code: 
  {
  $lookup: {
    from: "foreignCollection",
    let: { localVar: "$localField" },
    pipeline: [
      { $match: { $expr: { $eq: ["$foreignField", "$$localVar"] } } },
      { $project: { field1: 1, field2: 1 } }
    ],
    as: "outputArray"
  }
}


# Note: after lookUp the doc comes in array since for single foreign field there can be multiple docs in aother collection .
 So if you are sure that there there will be single matching doc in forign collection for local filed then can use $unwind 
 stage after $lookup to get data in object in place of array of objects for sing;e value also.
